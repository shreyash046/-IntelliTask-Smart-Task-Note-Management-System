package com.intelliTask.core.model;

import com.intelliTask.core.model.enums.Priority;
import com.intelliTask.core.model.enums.Status;
import jakarta.persistence.*; // Import JPA annotations
import lombok.Getter;
import lombok.Setter;
import lombok.NoArgsConstructor;
import lombok.EqualsAndHashCode;
import lombok.ToString;

import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

/**
 * Represents a single task in the intelliTask system.
 * This class is now a JPA Entity, mapped to a database table.
 * Getters, setters, constructors, equals, hashCode, and toString are handled by Lombok.
 *
 * UPDATED: Integrated Lombok and JPA annotations for database mapping.
 */
@Entity // This tells JPA that 'Task' is a database entity.
@Table(name = "tasks") // Specifies the name of the database table for tasks.
@Getter // Lombok: Automatically generates public getter methods for all fields.
@Setter // Lombok: Automatically generates public setter methods for all fields.
@NoArgsConstructor(access = lombok.AccessLevel.PROTECTED) // Lombok: Generates a protected no-argument constructor. Necessary for JPA.
@EqualsAndHashCode(of = "id") // Lombok: Generates equals() and hashCode() based ONLY on the 'id' field, crucial for JPA entities.
@ToString(exclude = "labelIds") // Lombok: Generates toString(). 'exclude' prevents recursion if label objects were directly embedded. For IDs, it's fine, but good habit.
public class Task {

    @Id // Marks this field as the primary key.
    @GeneratedValue(strategy = GenerationType.UUID) // Instructs JPA to generate a UUID for the ID automatically upon persistence.
    @Column(name = "id") // Maps this Java field to the 'id' column in the 'tasks' table.
    private String id;

    @Column(name = "description", nullable = false) // Maps to 'description' column, cannot be null.
    private String description;

    @Column(name = "is_completed", nullable = false) // Maps to 'is_completed' column, cannot be null.
    private boolean isCompleted;

    @Enumerated(EnumType.STRING) // <--- CRITICAL for Enums! Stores enum as its String name ("HIGH", "LOW"), not its ordinal (0, 1).
    @Column(name = "priority", nullable = false) // Maps to 'priority' column, cannot be null.
    private Priority priority;

    @Enumerated(EnumType.STRING) // <--- CRITICAL for Enums! Stores enum as its String name.
    @Column(name = "status", nullable = false) // Maps to 'status' column, cannot be null.
    private Status status;

    @Column(name = "created_at", nullable = false, updatable = false)
    @CreationTimestamp // Hibernate: Automatically sets this timestamp when the task is first saved.
    private LocalDateTime createdAt;

    @Column(name = "last_modified_at", nullable = false)
    @UpdateTimestamp // Hibernate: Automatically updates this timestamp every time the task is modified and saved.
    private LocalDateTime lastModifiedAt;

    // This field needs to be handled carefully with JPA for @ManyToMany relationships later.
    // For now, it will be stored as a simple collection of strings in a separate join table
    // or managed explicitly by the service.
    @ElementCollection(fetch = FetchType.EAGER) // <--- IMPORTANT: Tells JPA to store this collection. EAGER fetches it immediately.
    @CollectionTable(name = "task_labels", joinColumns = @JoinColumn(name = "task_id")) // Defines the join table for task_id to label_id.
    @Column(name = "label_id") // The column in the join table that holds the label ID.
    private List<String> labelIds;

    /**
     * Custom constructor for creating a new Task instance with initial data.
     * This constructor is used by our application logic, while the no-arg constructor
     * generated by Lombok is used by JPA for hydration.
     *
     * @param description The textual description of the task.
     * @param isCompleted The initial completion status of the task.
     * @param priority The initial priority level of the task.
     * @param status The initial status of the task.
     * @param labelIds An initial list of label IDs to associate with the task.
     */
    public Task(String description, boolean isCompleted, Priority priority, Status status, List<String> labelIds) {
        // Basic validation: ensure description is not null or empty
        if (description == null || description.trim().isEmpty()) {
            throw new IllegalArgumentException("Task description cannot be empty.");
        }
        // Ensure priority and status are not null
        if (priority == null) {
            throw new IllegalArgumentException("Task priority cannot be null.");
        }
        if (status == null) {
            throw new IllegalArgumentException("Task status cannot be null.");
        }

        this.description = description;
        this.isCompleted = isCompleted;
        this.priority = priority;
        this.status = status;
        this.labelIds = (labelIds != null) ? new ArrayList<>(labelIds) : new ArrayList<>();
        // createdAt and lastModifiedAt will be handled by @CreationTimestamp/@UpdateTimestamp automatically
        // ID will be generated by @GeneratedValue
    }
    // No need for explicit getters/setters/equals/hashCode/toString as Lombok handles them.
}