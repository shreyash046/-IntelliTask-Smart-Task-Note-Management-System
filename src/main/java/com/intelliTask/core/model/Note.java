// src/main/java/com/intelliTask/core/model/Note.java

package com.intelliTask.core.model;

import jakarta.persistence.*; // JPA annotations
import lombok.Getter;
import lombok.Setter;
import lombok.NoArgsConstructor;
import lombok.EqualsAndHashCode;
import lombok.ToString;

import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

/**
 * Represents a single note in the intelliTask system.
 * This class is now a JPA Entity, mapped to a database table.
 * Getters, setters, constructors, equals, hashCode, and toString are handled by Lombok.
 *
 * UPDATED: Integrated Lombok and JPA annotations for database mapping.
 */
@Entity // <--- Annotation 1: Marks this class as a JPA entity.
@Table(name = "notes") // <--- Annotation 2: Specifies the database table name.
@Getter // <--- Lombok: Generates all public getter methods.
@Setter // <--- Lombok: Generates all public setter methods.
@NoArgsConstructor(access = lombok.AccessLevel.PROTECTED) // <--- Lombok: Generates a protected no-argument constructor, required by JPA.
@EqualsAndHashCode(of = "id") // <--- Lombok: Generates equals() and hashCode() based ONLY on the 'id' field.
@ToString(exclude = "labelIds") // <--- Lombok: Generates toString(). Excludes labelIds to avoid potential issues (though for String IDs it's often fine).
public class Note {

    @Id // <--- Annotation 3: Marks this field as the primary key.
    @GeneratedValue(strategy = GenerationType.UUID) // <--- Annotation 4: Specifies UUID generation strategy for the ID.
    @Column(name = "id") // Maps to 'id' column.
    private String id;               // Unique identifier for the note

    @Column(name = "title", nullable = false) // Maps to 'title' column, cannot be null.
    private String title;            // The title of the note

    @Column(name = "content") // Maps to 'content' column. Nullable by default if not specified.
    private String content;          // The main content of the note

    @Column(name = "created_at", nullable = false, updatable = false)
    @CreationTimestamp // <--- Annotation 5: Automatically sets creation timestamp.
    private LocalDateTime createdAt;  // Timestamp when the note was created

    @Column(name = "last_modified_at", nullable = false)
    @UpdateTimestamp // <--- Annotation 6: Automatically updates modification timestamp.
    private LocalDateTime lastModifiedAt; // Timestamp when the note was last modified

    // This is an @ElementCollection, similar to Task, for storing a collection of basic types (Strings).
    @ElementCollection(fetch = FetchType.EAGER) // <--- Annotation 7: Tells JPA to store this collection of basic types. EAGER fetches it immediately.
    @CollectionTable(name = "note_labels", joinColumns = @JoinColumn(name = "note_id")) // <--- Annotation 8: Defines the join table name and foreign key column.
    @Column(name = "label_id") // <--- Annotation 9: The column in the join table that holds the label ID.
    private List<String> labelIds;   // List of IDs of labels associated with this note

    /**
     * Custom constructor to create a new Note instance with initial data.
     * This constructor is used by our application logic, while the no-arg constructor
     * generated by Lombok is used by JPA for hydration.
     *
     * @param title The title of the note.
     * @param content The main content of the note.
     * @param labelIds An initial list of label IDs to associate with the note.
     */
    public Note(String title, String content, List<String> labelIds) {
        // Basic validation: ensure title is not null or empty
        if (title == null || title.trim().isEmpty()) {
            throw new IllegalArgumentException("Note title cannot be empty.");
        }
        // Content can be empty, so no check for that here.

        this.title = title;
        this.content = content;
        // Defensive copy for labelIds, ensuring it's never null and is independent.
        this.labelIds = (labelIds != null) ? new ArrayList<>(labelIds) : new ArrayList<>();
        // createdAt and lastModifiedAt will be handled by @CreationTimestamp/@UpdateTimestamp automatically
        // ID will be generated by @GeneratedValue
    }

    // Overloaded constructor for simpler note creation without initial labels.
    public Note(String title, String content) {
        this(title, content, null); // Delegate to the more complete constructor, passing null for labels.
    }

    // No need for explicit getters/setters/equals/hashCode/toString as Lombok handles them.
}
